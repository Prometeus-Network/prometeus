{
	"info": {
		"_postman_id": "d07e4640-5bd1-4a41-8f26-68afc65a7392",
		"name": "[Prometheus] DDS + Billing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Upload a file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "95e58308-310d-474f-898e-6fc819f9bab5",
						"exec": [
							"let body = JSON.parse(pm.request.body);   ",
							"",
							"_.forEach(body, (value, key) => pm.environment.set(key, value));",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "01e82676-9b32-4d12-8eb7-5c5cc7a53f92",
						"exec": [
							"pm.test(\"response is payment required\", function() {",
							"    pm.response.to.have.status(402);",
							"});",
							"pm.test(\"response must be valid and have a body\", function() {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an(\"object\");",
							"});",
							"pm.test(\"type is file\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.type).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.type).to.eql(\"file\");",
							"})",
							"pm.test(\"there is a id\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
							"})",
							"pm.test(\"there are atributes\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes).to.be.an(\"object\");",
							"})",
							"pm.test(\"there is a correct file name\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.name).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.attributes.name).to.equal(pm.environment.get(\"attributes\").name)",
							"})",
							"pm.test(\"there is a correct duration\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.duration).to.be.a(\"number\");",
							"    pm.expect(jsonData.data.attributes.duration).to.equal(pm.environment.get(\"attributes\").duration)",
							"})",
							"pm.test(\"there is a correct price\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.price).to.be.a(\"number\");",
							"    pm.expect(jsonData.data.attributes.price).to.equal(100.5)",
							"})",
							"pm.test(\"there is a correct additional attributes\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.additional).to.be.an(\"object\");",
							"    ",
							"    var sentAdditional = pm.environment.get(\"attributes\").additional;",
							"    _.forEach(jsonData.data.attributes.additional, (value, key) => {",
							"        pm.expect(value).to.be.equal(sentAdditional[key]);",
							"    });",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors",
						"disabled": true
					},
					{
						"key": "Origin",
						"value": "http://localhost:8080"
					},
					{
						"key": "Accept-Encoding",
						"value": "gzip, deflate, br"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,uk-UA;q=0.8,uk;q=0.7,ru-UA;q=0.6,ru;q=0.5,es;q=0.4"
					},
					{
						"key": "X-Requested-With",
						"value": "XMLHttpRequest",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "Idea-8bf776a7=170158be-1d28-4cfa-a03b-1e64e5e8e435; CookieScriptConsent={\"action\":\"accept\"}; SESSION=YzMxYTI5ZGEtZDE2MC00MjBhLWE1NDItNzU5ZTY0MTE0ODUz"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Pragma",
						"value": "no-cache"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*"
					},
					{
						"key": "Cache-Control",
						"value": "no-cache"
					},
					{
						"key": "Referer",
						"value": "http://localhost:8080/affiliate/dashboard"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "DNT",
						"value": "1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"type\": \"file\",\n\t\"attributes\": {\n\t\t\"name\": \"file_name\",\n\t\t\"data\": \"some_data\",\n\t\t\"duration\": 100200,\n\t\t\"additional\": {\n\t\t\t\"test\": \"123\"\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "http://{{server}}/files",
					"protocol": "http",
					"host": [
						"{{server}}"
					],
					"path": [
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Extend a File",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "16960a90-f1f7-49c3-b602-3ea7c4c59be8",
						"exec": [
							"let body = JSON.parse(pm.request.body);   ",
							"",
							"_.forEach(body, (value, key) => pm.environment.set(key, value));",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0df4c226-5bdd-4d93-8efa-0371b48ec19b",
						"exec": [
							"pm.test(\"response is payment required\", function() {",
							"    pm.response.to.have.status(402);",
							"});",
							"pm.test(\"response must be valid and have a body\", function() {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an(\"object\");",
							"});",
							"pm.test(\"type is file\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.type).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.type).to.eql(\"file\");",
							"})",
							"pm.test(\"there is a id\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
							"})",
							"pm.test(\"there are atributes\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes).to.be.an(\"object\");",
							"})",
							"pm.test(\"there is a correct file name\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.name).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.attributes.name).to.equal(\"Test File\")",
							"})",
							"pm.test(\"there is a correct duration\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.duration).to.be.a(\"number\");",
							"    pm.expect(jsonData.data.attributes.duration).to.equal(pm.environment.get(\"attributes\").duration)",
							"})",
							"pm.test(\"there is a correct price\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.price).to.be.a(\"number\");",
							"    pm.expect(jsonData.data.attributes.price).to.equal(100.5)",
							"})",
							"pm.test(\"there is a correct additional attributes\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.additional).to.be.an(\"object\");",
							"    ",
							"    var sentAdditional = pm.environment.get(\"attributes\").additional;",
							"    _.forEach(jsonData.data.attributes.additional, (value, key) => {",
							"        if (sentAdditional.hasOwnProperty(key)) {",
							"            pm.expect(value).to.be.equal(sentAdditional[key]);",
							"        }",
							"    });",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"type\": \"file\",\n\t\"attributes\": {\n\t\t\"duration\": 100200,\n\t\t\"additional\": {\n\t\t\t\"testing\": \"123\"\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "http://{{server}}/files/09d910be-d11c-4ad4-bd23-d4c8e04536f9",
					"protocol": "http",
					"host": [
						"{{server}}"
					],
					"path": [
						"files",
						"09d910be-d11c-4ad4-bd23-d4c8e04536f9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a File info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2c6e66e-b6ee-44a4-b6a7-bbefae2cc78d",
						"exec": [
							"pm.test(\"response is OK\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", function() {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an(\"object\");",
							"});",
							"pm.test(\"type is file\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.type).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.type).to.eql(\"file\");",
							"})",
							"pm.test(\"there is a id\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
							"})",
							"pm.test(\"there are atributes\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes).to.be.an(\"object\");",
							"})",
							"pm.test(\"there is a correct file name\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.name).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.attributes.name).to.equal(\"Test File\")",
							"})",
							"pm.test(\"there is a correct duration\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.duration).to.be.a(\"number\");",
							"    pm.expect(jsonData.data.attributes.duration).to.equal(0)",
							"})",
							"pm.test(\"there is a correct price\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.price).to.be.a(\"number\");",
							"    pm.expect(jsonData.data.attributes.price).to.equal(100.5)",
							"})",
							"pm.test(\"there is a correct additional attributes\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.additional).to.be.an(\"object\");",
							"    pm.expect(jsonData.data.attributes.additional.data).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.attributes.additional.data).to.equal(\"test data\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{server}}/files/09d910be-d11c-4ad4-bd23-d4c8e04536f9/info",
					"protocol": "http",
					"host": [
						"{{server}}"
					],
					"path": [
						"files",
						"09d910be-d11c-4ad4-bd23-d4c8e04536f9",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a File",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5ceb9bc9-6ada-43e2-bd3e-891c80979840",
						"exec": [
							"pm.test(\"response is OK\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", function() {",
							"    pm.response.to.be.withBody;",
							"});",
							"pm.test(\"response body is `some file data`\", function() {",
							"    pm.response.to.have.body(\"some file data\");",
							"});",
							"pm.test(\"Content-Type header is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Content-Type header is binary/octet-stream\", function() {",
							"    pm.expect(postman.getResponseHeader(\"Content-Type\")).to.eql(\"binary/octet-stream\");",
							"});",
							"pm.test(\"Content-Length header is present\", function() {",
							"    pm.response.to.have.header(\"Content-Length\");",
							"});",
							"pm.test(\"Content-Length header is 14\", function() {",
							"    pm.expect(postman.getResponseHeader(\"Content-Length\")).to.eql(\"14\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{server}}/files/09d910be-d11c-4ad4-bd23-d4c8e04536f9",
					"protocol": "http",
					"host": [
						"{{server}}"
					],
					"path": [
						"files",
						"09d910be-d11c-4ad4-bd23-d4c8e04536f9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success payment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1452481a-9f7c-4479-81eb-669b112f1848",
						"exec": [
							"let body = JSON.parse(pm.request.body);   ",
							"",
							"_.forEach(body, (value, key) => pm.environment.set(key, value));",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "630b3ea7-c420-4d65-9d42-ea6947c4ba6a",
						"exec": [
							"pm.test(\"response is created\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Location header is present\", function() {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"pm.test(\"Location header is /payments/...\", function() {",
							"    pm.expect(postman.getResponseHeader(\"Location\")).to.include(\"/payments/\");",
							"});",
							"pm.test(\"response must be valid and have a body\", function() {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an(\"object\");",
							"});",
							"pm.test(\"type is payment\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.type).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.type).to.eql(\"payment\");",
							"})",
							"pm.test(\"there is a id\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
							"})",
							"pm.test(\"there are atributes\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes).to.be.an(\"object\");",
							"})",
							"pm.test(\"there is a correct file id\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.file_id).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.attributes.file_id).to.equal(pm.environment.get(\"attributes\").file_id)",
							"})",
							"pm.test(\"there is a correct status\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.status).to.be.a(\"string\");",
							"    pm.expect(jsonData.data.attributes.status).to.equal(pm.environment.get(\"attributes\").status)",
							"})",
							"pm.test(\"there is a correct amount\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.attributes.amount).to.be.a(\"number\");",
							"    pm.expect(jsonData.data.attributes.amount).to.equal(pm.environment.get(\"attributes\").amount)",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"type\": \"file\",\n\t\"attributes\": {\n\t\t\"file_id\": \"09d910be-d11c-4ad4-bd23-d4c8e04536f9\",\n\t\t\"status\": \"success\",\n\t\t\"amount\": 100.5\n\t}\n}"
				},
				"url": {
					"raw": "http://{{server}}/payments",
					"protocol": "http",
					"host": [
						"{{server}}"
					],
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Needed",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{server}}/payments/local?from=20190203&to=20190303",
					"protocol": "http",
					"host": [
						"{{server}}"
					],
					"path": [
						"payments",
						"local"
					],
					"query": [
						{
							"key": "from",
							"value": "20190203"
						},
						{
							"key": "to",
							"value": "20190303"
						}
					]
				}
			},
			"response": []
		}
	]
}